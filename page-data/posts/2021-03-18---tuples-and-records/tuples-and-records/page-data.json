{
    "componentChunkName": "component---src-templates-post-template-post-template-tsx",
    "path": "/posts/2021-03-18---tuples-and-records/tuples-and-records",
    "result": {"data":{"markdownRemark":{"id":"a7287fc5-ddc1-554d-b7f0-cf250d5314b0","html":"<h3 id=\"tuples\" style=\"position:relative;\"><a href=\"#tuples\" aria-label=\"tuples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tuples</h3>\n<p>Both tuples and records have the same syntax. They can be defined by using a # prefix in front of objects and arrays, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// This is a normal array</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// This is a tuple</span>\n<span class=\"token keyword\">const</span> tuple <span class=\"token operator\">=</span> #<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When working with tuples, there are some rules you need to be aware of:</p>\n<p>There cannot be holes in an array, eg.: [1, ,2] is disallowed</p>\n<p>They can only contain primitives or other tuples and records</p>\n<p>Supports instance methods similar to Arrays, but with a few changes</p>\n<p>For example, operations that mutate the array are replaced with new operations that instead, return a new array. Therefore, eg.: there’s no push, instead you can use pushed that returns a new tuple with the pushed value, or with to change a value at a given index:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> tuple <span class=\"token operator\">=</span> #<span class=\"token punctuation\">[</span><span class=\"token string\">'🍄'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍅'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🥕'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Both returns a new tuple</span>\ntuple<span class=\"token punctuation\">.</span><span class=\"token function\">pushed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'🥒'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// returns #['🍄', '🍅', '🥕', '🥒'];</span>\ntuple<span class=\"token punctuation\">.</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🌳'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns #['🌳', '🍅', '🥕']</span>\ntuple<span class=\"token punctuation\">.</span>js\nYou can also create tuples from existing arrays using Tuple<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\nTuple<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'🍄'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍅'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🥕'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Likewise, you can turn a tuple into an ordinary array:</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntuple<span class=\"token punctuation\">.</span>js\nAnd <span class=\"token keyword\">of</span> course<span class=\"token punctuation\">,</span> they are immutable and will <span class=\"token keyword\">throw</span> an error <span class=\"token keyword\">if</span> you <span class=\"token keyword\">try</span> to change their value or use non<span class=\"token operator\">-</span>primitives<span class=\"token operator\">:</span>\n\n<span class=\"token keyword\">const</span> tuples <span class=\"token operator\">=</span> #<span class=\"token punctuation\">[</span><span class=\"token string\">'🍄'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍅'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🥕'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// TypeError: Callback to Tuple.prototype.map may only return primitives, Records or Tuples</span>\ntuples<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tuple</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h3 id=\"records\" style=\"position:relative;\"><a href=\"#records\" aria-label=\"records permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Records</h3>\n<p>Just like tuples, records are also denoted by a hash:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// This is a regular object</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// This is a record</span>\n<span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> #<span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">tuple</span><span class=\"token operator\">:</span> #<span class=\"token punctuation\">[</span><span class=\"token string\">'🍄'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍅'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🥕'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Records can also contain tuples</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When working with records, you also need to keep in mind some rules:</p>\n<p>You cannot use the <code class=\"language-text\">__proto__</code> identifier in records\nMethods are also disallowed. Just like tuples, they can only contain primitives.\nTo create a new record, you also have the option to use Record, or Record.fromEntries when working with tuples:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> <span class=\"token function\">Record</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">mushroom</span><span class=\"token operator\">:</span> <span class=\"token string\">'🍄'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">tomato</span><span class=\"token operator\">:</span> <span class=\"token string\">'🍅'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">carrot</span><span class=\"token operator\">:</span> <span class=\"token string\">'🥕'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Or</span>\n<span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> Record<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span>#<span class=\"token punctuation\">[</span><span class=\"token string\">'🍄'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍅'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🥕'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrecord<span class=\"token punctuation\">.</span>js\nAnd since they are <span class=\"token keyword\">new</span> <span class=\"token class-name\">data</span> types<span class=\"token punctuation\">,</span> you would <span class=\"token keyword\">get</span> <span class=\"token string\">\"record\"</span> back when using the <span class=\"token keyword\">typeof</span> <span class=\"token literal-property property\">operator</span><span class=\"token operator\">:</span>\n\n<span class=\"token keyword\">typeof</span> #<span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// returns \"record\"</span>\n<span class=\"token keyword\">typeof</span> #<span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">]</span> <span class=\"token comment\">// returns \"tuple\"</span></code></pre></div>","fields":{"slug":"/posts/2021-03-18---tuples-and-records/tuples-and-records","tagSlugs":["/tag/frontend/","/tag/web-development/"]},"frontmatter":{"date":"2021-03-18T12:40:32.169Z","description":"","tags":["Frontend","Web Development"],"title":"Tuples and Records","socialImage":""}}},"pageContext":{"slug":"/posts/2021-03-18---tuples-and-records/tuples-and-records"}},
    "staticQueryHashes": ["251939775","357378587","401334301"]}