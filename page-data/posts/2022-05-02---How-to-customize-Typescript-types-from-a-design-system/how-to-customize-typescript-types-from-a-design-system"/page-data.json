{
    "componentChunkName": "component---src-templates-post-template-post-template-tsx",
    "path": "/posts/2022-05-02---How-to-customize-Typescript-types-from-a-design-system/how-to-customize-typescript-types-from-a-design-system\"",
    "result": {"data":{"markdownRemark":{"id":"46a6437a-e037-5dbf-beff-5ffc64a4a0b0","html":"<p>Typescript is a powerful tool for building large-scale, complex, and maintainable applications. It is a superset of JavaScript, and is used to build both client-side and server-side applications.\nIt is quite popular in the industry, and is used by our team as well.Although the runtime bugs are still depending on the developer skill set, two major benefits of using Typescript are:</p>\n<ol>\n<li>It reduces the compile time bug rate by defining the types of variables and functions explicitly.</li>\n<li>It speeds up the development process by defining the types of variables and functions explicitly.</li>\n</ol>\n<p>And yes, define the types of variables and functions explicitly is indeed a good practice.</p>\n<p>For a React Project, generally, the types of Props and Components are defined in the following way:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">FC</span><span class=\"token punctuation\">,</span> Dispatch<span class=\"token punctuation\">,</span> SetStateAction<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> 'react<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">DateRangeData</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    month<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    year<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  dateRangeData<span class=\"token operator\">:</span> DateRangeData<span class=\"token punctuation\">;</span>\n  setDateRange<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Dispatch<span class=\"token operator\">&lt;</span>SetStateAction<span class=\"token operator\">&lt;</span>PatchApiDateRange<span class=\"token punctuation\">.</span>Data<span class=\"token operator\">>></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> MyComponent<span class=\"token operator\">:</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> dateRangeData<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> month<span class=\"token punctuation\">,</span> year <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> dateRangeData<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>year<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>month<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A quick question, how to customize the types of variables and functions for an existing design system?</p>\n<p>Iâ€™ll use <a href=\"https://ant.design/components/overview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ant Design</a> as an example.</p>\n<h4 id=\"use-case-extends-the-type\" style=\"position:relative;\"><a href=\"#use-case-extends-the-type\" aria-label=\"use case extends the type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Case: Extends the Type</h4>\n<p>We are going to extend the Props to add a new type: <code class=\"language-text\">suffix</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">FC</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ButtonProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd/lib/button'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StyledButton<span class=\"token punctuation\">,</span> Suffix <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./styled'</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token punctuation\">{</span>\n  suffix<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Button<span class=\"token operator\">:</span> <span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  suffix<span class=\"token punctuation\">,</span>\n  children<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>props\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>StyledButton\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span>\n      $type<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>type <span class=\"token operator\">||</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">}</span>\n      $size<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> <span class=\"token string\">'middle'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">{</span>suffix <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>Suffix<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>suffix<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Suffix<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StyledButton<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Button</code></pre></div>\n<p>It is quite easy.</p>\n<p>And for <code class=\"language-text\">$type</code> and <code class=\"language-text\">$size</code>, they are <a href=\"https://styled-components.com/docs/api#transient-props\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Transient props</a>.\nIt prevents props meant to be consumed by styled components from being passed to the underlying React node or rendered to the DOM element, you can prefix the prop name with a dollar sign ($), turning it into a transient prop.</p>\n<h4 id=\"use-case-override-the-type\" style=\"position:relative;\"><a href=\"#use-case-override-the-type\" aria-label=\"use case override the type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Case: Override the Type</h4>\n<p>The button component has a <code class=\"language-text\">type</code> type and it contains 6 values: primary, ghost, dashed, link, text and default.\nWe are going to override the type of the button component to add a new type: <code class=\"language-text\">secondary</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Button/types.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ButtonType <span class=\"token keyword\">as</span> OriginalButtonType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd/lib/button'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> ButtonType <span class=\"token punctuation\">{</span>\n  primary <span class=\"token operator\">=</span> <span class=\"token string\">'primary'</span><span class=\"token punctuation\">,</span>\n  secondary <span class=\"token operator\">=</span> <span class=\"token string\">'secondary'</span><span class=\"token punctuation\">,</span>\n  outline <span class=\"token operator\">=</span> <span class=\"token string\">'outline'</span><span class=\"token punctuation\">,</span>\n  text <span class=\"token operator\">=</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n  link <span class=\"token operator\">=</span> <span class=\"token string\">'link'</span><span class=\"token punctuation\">,</span>\n  dashed <span class=\"token operator\">=</span> <span class=\"token string\">'dashed'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TypeAlias</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> OriginalButtonType\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Button/index.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">FC</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ButtonProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd/lib/button'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StyledButton<span class=\"token punctuation\">,</span> Suffix <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./styled'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ButtonType<span class=\"token punctuation\">,</span> ButtonSize<span class=\"token punctuation\">,</span> TypeAlias <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ButtonType\n  suffix<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Button<span class=\"token operator\">:</span> <span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>Omit<span class=\"token operator\">&lt;</span>ButtonProps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> Props<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type <span class=\"token operator\">=</span> ButtonType<span class=\"token punctuation\">.</span>secondary<span class=\"token punctuation\">,</span>\n  suffix<span class=\"token punctuation\">,</span>\n  children<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>props\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n  *   Below alias is not required for a fully custom style component.\n  *   It is only applicable when we want to reuse the original styles according to the type.\n  **/</span>\n  <span class=\"token keyword\">const</span> typeAlias<span class=\"token operator\">:</span> TypeAlias <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>ButtonType<span class=\"token punctuation\">.</span>primary<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">'primary'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>ButtonType<span class=\"token punctuation\">.</span>secondary<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>ButtonType<span class=\"token punctuation\">.</span>outline<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>ButtonType<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>ButtonType<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">'link'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>ButtonType<span class=\"token punctuation\">.</span>dashed<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">'dashed'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>StyledButton\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span>\n      type<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>typeAlias<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n      $type<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">}</span>\n      $size<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ButtonSize<span class=\"token punctuation\">.</span>middle<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">{</span>suffix <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>Suffix<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>suffix<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Suffix<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StyledButton<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Button</code></pre></div>\n<p>In this case, we shall just focus on the <code class=\"language-text\">Omit</code> utility function.\n<code class=\"language-text\">Omit</code> removes the keys of Props from the ButtonProps.\nLexically, it shall remove <code class=\"language-text\">type</code> and <code class=\"language-text\">suffix</code> from the ButtonProps.\nBut <code class=\"language-text\">suffix</code> is not existed at all so that only <code class=\"language-text\">type</code> would be removed.</p>\n<p>This rule can be simply applied to any types when we want to customize them.</p>\n<h4 id=\"use-case-override-components-as-typescript-generic-functions\" style=\"position:relative;\"><a href=\"#use-case-override-components-as-typescript-generic-functions\" aria-label=\"use case override components as typescript generic functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Case: Override Components as TypeScript Generic Functions</h4>\n<p>The select component has a <code class=\"language-text\">mode</code> type and it contains 2 values: multiple and tags.\nWe are going to override the type of the select component to only support <code class=\"language-text\">tags</code> mode.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">FC</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SelectValue<span class=\"token punctuation\">,</span> SelectProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd/lib/select'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SizeType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd/lib/config-provider/SizeContext'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StyledSelect<span class=\"token punctuation\">,</span> GlobalSelectStyle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./styled'</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  size<span class=\"token operator\">?</span><span class=\"token operator\">:</span> SizeType\n  status<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span>\n  mode<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'tags'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">CustomSelectProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">VT</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>SelectProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">VT</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> Props<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> Props\n\n<span class=\"token keyword\">const</span> Select<span class=\"token operator\">:</span> <span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>CustomSelectProps<span class=\"token operator\">&lt;</span>SelectValue<span class=\"token operator\">>></span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>\n  <span class=\"token constant\">VT</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SelectValue</span> <span class=\"token operator\">=</span> SelectValue\n<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  size <span class=\"token operator\">=</span> <span class=\"token string\">'middle'</span><span class=\"token punctuation\">,</span>\n  status<span class=\"token punctuation\">,</span>\n  mode<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>props\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> CustomSelectProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">VT</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>GlobalSelectStyle $size<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>StyledSelect\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span>\n        size<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">}</span>\n        $size<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">}</span>\n        $status<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">}</span>\n        mode<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>mode<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Select</code></pre></div>\n<p>VT stands for Value Type and it is consistent with the definition of the SelectValue in Ant Design.\n<code class=\"language-text\">GlobalSelectStyle</code> is used for overriding the dropdown menu style.</p>\n<p>Happy coding!</p>","fields":{"slug":"/posts/2022-05-02---How-to-customize-Typescript-types-from-a-design-system/how-to-customize-typescript-types-from-a-design-system\"","tagSlugs":["/tag/frontend/","/tag/web-development/","/tag/typescript/","/tag/ant-design/"]},"frontmatter":{"date":"2022-05-02T12:40:32.169Z","description":"","tags":["Frontend","Web Development","Typescript","Ant Design"],"title":"How to customize Typescript types from a design system","socialImage":""}}},"pageContext":{"slug":"/posts/2022-05-02---How-to-customize-Typescript-types-from-a-design-system/how-to-customize-typescript-types-from-a-design-system\""}},
    "staticQueryHashes": ["251939775","357378587","401334301"]}